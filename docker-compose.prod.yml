# Docker Compose para Produção - PeopleConnect

services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: peopleconnect-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-peopleconnect}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Backend/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - peopleconnect-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
      target: runtime
    container_name: peopleconnect-backend-prod
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB:-peopleconnect};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - peopleconnect-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M

  # Frontend
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      target: runtime
    container_name: peopleconnect-frontend-prod
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - peopleconnect-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: peopleconnect-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - peopleconnect-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  postgres_data:
    driver: local

networks:
  peopleconnect-network:
    driver: bridge
